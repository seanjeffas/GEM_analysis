

const int nmod = 8;
TString name_map[8] = {"UV layer 0", "UV layer 1", "UV layer 2", "UV layer 3", "XY module 0", "XY module 1", "XY module 2", "XY module 3"}; 

const int apv_map[8] = {30,30,30,30,10,10,10,10}; 

const int nruns = 7;
//int runs[5] = {13449, 13447, 13445, 13516, 13420};
//int currents[5] = {5, 3, 1, 0, 0};
int runs[7] = {13598, 13599, 13600, 13601, 13602, 13603, 13604};
TString run_title[7] = {"1 uA on LD2 op HV", "3 uA on LD2 op HV", "3 uA on LD2 half HV", "5 uA on LD2 op HV", "7 uA on LD2 op HV", "7 uA on LD2 half HV", "1 uA on LD2 0 HV"};

//TLegend *legend = new TLegend(0.55,0.7,0.9,0.9);
//TLegend *legend = new TLegend(0.1,0.75,0.45,0.9);


void file_search(int run, TFile *f){
  
  for(int iseg = 0; iseg < 10; iseg++){
    TString Rootfile = Form("../../Rootfiles/e1209019_replayed_%i_stream0_seg0_%i_firstevent0_nevent200000.root",run,iseg);
    
    cout<<Rootfile<<endl;
    if(gSystem->AccessPathName(Rootfile))
      continue;
    else{
      f = new TFile(Rootfile);
      break;
    }
    

  }


}


void make_adc_plots(int irun, TCanvas *c, int color, TLegend *legend[8]){
  
  int run = runs[irun];

  
  TFile *f;
  file_search(run,f);
 
  
  for(int imod=0; imod < nmod; imod++){
    
    TH1F *h = (TH1F*)f->Get(Form("hADCpedsubU_allstrips_bb_gem_m%i",imod));
    h->SetTitle(name_map[imod]);

    c->cd(imod + 1);

    
    double xmin=350,xmax=3500;
    double ent=0;
    int minbin=h->GetXaxis()->FindBin(xmin);
    int maxbin=h->GetXaxis()->FindBin(xmax);
    for(int i=minbin;i<=maxbin;i++){
      ent+=h->GetBinContent(i);
    }

    double n_pos = ent;

    xmin=-500;
    xmax=-350;
    ent=0;
    minbin=h->GetXaxis()->FindBin(xmin);
    maxbin=h->GetXaxis()->FindBin(xmax);
    for(int i=minbin;i<=maxbin;i++){  
      ent+=h->GetBinContent(i);
    }

    double n_neg = ent;

    legend[imod]->AddEntry(h,Form(run_title[irun] + " %.2f",n_neg/n_pos*100));
    

    //h->GetXaxis()->SetRangeUser(-500,-100);
    h->Scale(1/h->GetMaximum());
    h->SetLineColor(color);
    h->Draw("same hist");

    gPad->SetLogy();
    legend[imod]->Draw("same");

    
    //cout<<currents[irun]<<" neg/pos = "<<n_neg/n_pos<<" "<<n_neg<<" "<<n_pos<<endl;
  
  }  


}


void make_CM_plots(int irun, TCanvas *c, int color, TLegend *legend[8]){
  
  int run = runs[irun];

  TFile *f;
  file_search(run,f);

  for(int imod=0; imod < nmod; imod++){
    
    TH2F *h2 = (TH2F*)f->Get(Form("hcommonmodeU_sorting_bb_gem_m%i",imod));

    double x[apv_map[imod]];
    double y[apv_map[imod]];
    double ex[apv_map[imod]];
    double ey[apv_map[imod]];

    for(int iapv=0; iapv < apv_map[imod]; iapv++){
      TH1D *h1 = h2->ProjectionY(Form("h%i",imod),iapv,iapv + 1);
      
      x[iapv] = iapv;
      y[iapv] = h1->GetMean();
      ex[iapv] = 0.5;
      ey[iapv] = h1->GetStdDev();
    
    }  
    
    TGraphErrors *g = new TGraphErrors(apv_map[imod],x,y,ex,ey);
    
    c->cd(imod+1);
    g->SetMarkerColor(color);
    g->SetLineColor(color);
    g->GetYaxis()->SetRangeUser(-60,60);
    g->SetTitle(name_map[imod] + ";APV;Common Mode Sorting - Common Mode Mean");
    
    if(color == 1) g->Draw("ap");
    else g->Draw("p");

    legend[imod]->Draw("same");
  }  


}



////// This is the main function ///////
void neg_signal(int run = 13449){

  gStyle->SetOptStat(0);
  gStyle->SetPalette(1);



  TCanvas *c = new TCanvas("c","",1600,1200);
  c->Divide(4,2);

  TCanvas *c2 = new TCanvas("c2","",1600,1200);
  c2->Divide(4,2);

  TLegend *legend[8];

  int color = 0;

  

  for(int imod=0; imod<nmod; imod++){
    legend[imod] = new TLegend(0.48,0.7,0.9,0.9);
    legend[imod]->SetTextSize(0.04);
  }

  for(int irun=0; irun<nruns; irun++){
    color++;
    if(color == 5) color++;

    make_adc_plots(irun, c, color, legend); 
    make_CM_plots(irun, c2, color, legend); 
  }


  c->SaveAs("../plots/neg_signal_ADC.png");
  c2->SaveAs("../plots/neg_signal_CM.png");

}
